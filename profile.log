SCRIPT  /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/python.vim
Sourced 1 time
Total time:   0.002643
 Self time:   0.002639

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:	Python
                            " Maintainer:	Zvezdan Petkovic <zpetkovic@acm.org>
                            " Last Change:	2023 Feb 28
                            " Credits:	Neil Schemenauer <nas@python.ca>
                            "		Dmitry Vasiliev
                            "
                            "		This version is a major rewrite by Zvezdan Petkovic.
                            "
                            "		- introduced highlighting of doctests
                            "		- updated keywords, built-ins, and exceptions
                            "		- corrected regular expressions for
                            "
                            "		  * functions
                            "		  * decorators
                            "		  * strings
                            "		  * escapes
                            "		  * numbers
                            "		  * space error
                            "
                            "		- corrected synchronization
                            "		- more highlighting is ON by default, except
                            "		- space error highlighting is OFF by default
                            "
                            " Optional highlighting can be controlled using these variables.
                            "
                            "   let python_no_builtin_highlight = 1
                            "   let python_no_doctest_code_highlight = 1
                            "   let python_no_doctest_highlight = 1
                            "   let python_no_exception_highlight = 1
                            "   let python_no_number_highlight = 1
                            "   let python_space_error_highlight = 1
                            "
                            " All the options above can be switched on together.
                            "
                            "   let python_highlight_all = 1
                            "
                            " The use of Python 2 compatible syntax highlighting can be enforced.
                            " The straddling code (Python 2 and 3 compatible), up to Python 3.5,
                            " will be also supported.
                            "
                            "   let python_use_python2_syntax = 1
                            "
                            " This option will exclude all modern Python 3.6 or higher features.
                            "
                            
                            " quit when a syntax file was already loaded.
    1              0.000003 if exists("b:current_syntax")
                              finish
    1              0.000000 endif
                            
                            " Use of Python 2 and 3.5 or lower requested.
    1              0.000001 if exists("python_use_python2_syntax")
                              runtime! syntax/python2.vim
                              finish
    1              0.000000 endif
                            
                            " We need nocompatible mode in order to continue lines with backslashes.
                            " Original setting will be restored.
    1              0.000003 let s:cpo_save = &cpo
    1   0.000006   0.000004 set cpo&vim
                            
    1              0.000001 if exists("python_no_doctest_highlight")
                              let python_no_doctest_code_highlight = 1
    1              0.000000 endif
                            
    1              0.000001 if exists("python_highlight_all")
                              if exists("python_no_builtin_highlight")
                                unlet python_no_builtin_highlight
                              endif
                              if exists("python_no_doctest_code_highlight")
                                unlet python_no_doctest_code_highlight
                              endif
                              if exists("python_no_doctest_highlight")
                                unlet python_no_doctest_highlight
                              endif
                              if exists("python_no_exception_highlight")
                                unlet python_no_exception_highlight
                              endif
                              if exists("python_no_number_highlight")
                                unlet python_no_number_highlight
                              endif
                              let python_space_error_highlight = 1
    1              0.000000 endif
                            
                            " Keep Python keywords in alphabetical order inside groups for easy
                            " comparison with the table in the 'Python Language Reference'
                            " https://docs.python.org/reference/lexical_analysis.html#keywords.
                            " Groups are in the order presented in NAMING CONVENTIONS in syntax.txt.
                            " Exceptions come last at the end of each group (class and def below).
                            "
                            " The list can be checked using:
                            "
                            " python3 -c 'import keyword, pprint; pprint.pprint(keyword.kwlist + keyword.softkwlist, compact=True)'
                            "
    1              0.002301 syn keyword pythonStatement	False None True
    1              0.000008 syn keyword pythonStatement	as assert break continue del global
    1              0.000003 syn keyword pythonStatement	lambda nonlocal pass return with yield
    1              0.000003 syn keyword pythonStatement	class def nextgroup=pythonFunction skipwhite
    1              0.000001 syn keyword pythonConditional	elif else if
    1              0.000002 syn keyword pythonRepeat	for while
    1              0.000002 syn keyword pythonOperator	and in is not or
    1              0.000002 syn keyword pythonException	except finally raise try
    1              0.000001 syn keyword pythonInclude	from import
    1              0.000001 syn keyword pythonAsync		async await
                            
                            " Soft keywords
                            " These keywords do not mean anything unless used in the right context.
                            " See https://docs.python.org/3/reference/lexical_analysis.html#soft-keywords
                            " for more on this.
    1              0.000010 syn match   pythonConditional   "^\s*\zscase\%(\s\+.*:.*$\)\@="
    1              0.000004 syn match   pythonConditional   "^\s*\zsmatch\%(\s\+.*:\s*\%(#.*\)\=$\)\@="
                            
                            " Decorators
                            " A dot must be allowed because of @MyClass.myfunc decorators.
    1              0.000002 syn match   pythonDecorator	"@" display contained
    1              0.000003 syn match   pythonDecoratorName	"@\s*\h\%(\w\|\.\)*" display contains=pythonDecorator
                            
                            " Python 3.5 introduced the use of the same symbol for matrix multiplication:
                            " https://www.python.org/dev/peps/pep-0465/.  We now have to exclude the
                            " symbol from highlighting when used in that context.
                            " Single line multiplication.
    1              0.000008 syn match   pythonMatrixMultiply
                                  \ "\%(\w\|[])]\)\s*@"
                                  \ contains=ALLBUT,pythonDecoratorName,pythonDecorator,pythonFunction,pythonDoctestValue
                                  \ transparent
                            " Multiplication continued on the next line after backslash.
    1              0.000005 syn match   pythonMatrixMultiply
                                  \ "[^\\]\\\s*\n\%(\s*\.\.\.\s\)\=\s\+@"
                                  \ contains=ALLBUT,pythonDecoratorName,pythonDecorator,pythonFunction,pythonDoctestValue
                                  \ transparent
                            " Multiplication in a parenthesized expression over multiple lines with @ at
                            " the start of each continued line; very similar to decorators and complex.
    1              0.000009 syn match   pythonMatrixMultiply
                                  \ "^\s*\%(\%(>>>\|\.\.\.\)\s\+\)\=\zs\%(\h\|\%(\h\|[[(]\).\{-}\%(\w\|[])]\)\)\s*\n\%(\s*\.\.\.\s\)\=\s\+@\%(.\{-}\n\%(\s*\.\.\.\s\)\=\s\+@\)*"
                                  \ contains=ALLBUT,pythonDecoratorName,pythonDecorator,pythonFunction,pythonDoctestValue
                                  \ transparent
                            
    1              0.000001 syn match   pythonFunction	"\h\w*" display contained
                            
    1              0.000004 syn match   pythonComment	"#.*$" contains=pythonTodo,@Spell
    1              0.000001 syn keyword pythonTodo		FIXME NOTE NOTES TODO XXX contained
                            
                            " Triple-quoted strings can contain doctests.
    1              0.000008 syn region  pythonString matchgroup=pythonQuotes
                                  \ start=+[uU]\=\z(['"]\)+ end="\z1" skip="\\\\\|\\\z1"
                                  \ contains=pythonEscape,@Spell
    1              0.000007 syn region  pythonString matchgroup=pythonTripleQuotes
                                  \ start=+[uU]\=\z('''\|"""\)+ skip=+\\["']+ end="\z1" keepend
                                  \ contains=pythonEscape,pythonSpaceError,pythonDoctest,@Spell
    1              0.000005 syn region  pythonRawString matchgroup=pythonQuotes
                                  \ start=+[uU]\=[rR]\z(['"]\)+ end="\z1" skip="\\\\\|\\\z1"
                                  \ contains=@Spell
    1              0.000008 syn region  pythonRawString matchgroup=pythonTripleQuotes
                                  \ start=+[uU]\=[rR]\z('''\|"""\)+ end="\z1" keepend
                                  \ contains=pythonSpaceError,pythonDoctest,@Spell
                            
    1              0.000002 syn match   pythonEscape	+\\[abfnrtv'"\\]+ contained
    1              0.000002 syn match   pythonEscape	"\\\o\{1,3}" contained
    1              0.000001 syn match   pythonEscape	"\\x\x\{2}" contained
    1              0.000002 syn match   pythonEscape	"\%(\\u\x\{4}\|\\U\x\{8}\)" contained
                            " Python allows case-insensitive Unicode IDs: http://www.unicode.org/charts/
    1              0.000002 syn match   pythonEscape	"\\N{\a\+\%(\s\a\+\)*}" contained
    1              0.000001 syn match   pythonEscape	"\\$"
                            
                            " It is very important to understand all details before changing the
                            " regular expressions below or their order.
                            " The word boundaries are *not* the floating-point number boundaries
                            " because of a possible leading or trailing decimal point.
                            " The expressions below ensure that all valid number literals are
                            " highlighted, and invalid number literals are not.  For example,
                            "
                            " - a decimal point in '4.' at the end of a line is highlighted,
                            " - a second dot in 1.0.0 is not highlighted,
                            " - 08 is not highlighted,
                            " - 08e0 or 08j are highlighted,
                            "
                            " and so on, as specified in the 'Python Language Reference'.
                            " https://docs.python.org/reference/lexical_analysis.html#numeric-literals
    1              0.000008 if !exists("python_no_number_highlight")
                              " numbers (including complex)
    1              0.000003   syn match   pythonNumber	"\<0[oO]\%(_\=\o\)\+\>"
    1              0.000002   syn match   pythonNumber	"\<0[xX]\%(_\=\x\)\+\>"
    1              0.000003   syn match   pythonNumber	"\<0[bB]\%(_\=[01]\)\+\>"
    1              0.000003   syn match   pythonNumber	"\<\%([1-9]\%(_\=\d\)*\|0\+\%(_\=0\)*\)\>"
    1              0.000002   syn match   pythonNumber	"\<\d\%(_\=\d\)*[jJ]\>"
    1              0.000003   syn match   pythonNumber	"\<\d\%(_\=\d\)*[eE][+-]\=\d\%(_\=\d\)*[jJ]\=\>"
    1              0.000004   syn match   pythonNumber
                                    \ "\<\d\%(_\=\d\)*\.\%([eE][+-]\=\d\%(_\=\d\)*\)\=[jJ]\=\%(\W\|$\)\@="
    1              0.000004   syn match   pythonNumber
                                    \ "\%(^\|\W\)\zs\%(\d\%(_\=\d\)*\)\=\.\d\%(_\=\d\)*\%([eE][+-]\=\d\%(_\=\d\)*\)\=[jJ]\=\>"
    1              0.000001 endif
                            
                            " Group the built-ins in the order in the 'Python Library Reference' for
                            " easier comparison.
                            " https://docs.python.org/library/constants.html
                            " http://docs.python.org/library/functions.html
                            " Python built-in functions are in alphabetical order.
                            "
                            " The list can be checked using:
                            "
                            " python3 -c 'import builtins, pprint; pprint.pprint(dir(builtins), compact=True)'
                            "
                            " The constants added by the `site` module are not listed below because they
                            " should not be used in programs, only in interactive interpreter.
                            " Similarly for some other attributes and functions `__`-enclosed from the
                            " output of the above command.
                            "
    1              0.000003 if !exists("python_no_builtin_highlight")
                              " built-in constants
                              " 'False', 'True', and 'None' are also reserved words in Python 3
    1              0.000002   syn keyword pythonBuiltin	False True None
    1              0.000002   syn keyword pythonBuiltin	NotImplemented Ellipsis __debug__
                              " constants added by the `site` module
    1              0.000002   syn keyword pythonBuiltin	quit exit copyright credits license
                              " built-in functions
    1              0.000002   syn keyword pythonBuiltin	abs all any ascii bin bool breakpoint bytearray
    1              0.000001   syn keyword pythonBuiltin	bytes callable chr classmethod compile complex
    1              0.000002   syn keyword pythonBuiltin	delattr dict dir divmod enumerate eval exec
    1              0.000001   syn keyword pythonBuiltin	filter float format frozenset getattr globals
    1              0.000001   syn keyword pythonBuiltin	hasattr hash help hex id input int isinstance
    1              0.000001   syn keyword pythonBuiltin	issubclass iter len list locals map max
    1              0.000002   syn keyword pythonBuiltin	memoryview min next object oct open ord pow
    1              0.000001   syn keyword pythonBuiltin	print property range repr reversed round set
    1              0.000001   syn keyword pythonBuiltin	setattr slice sorted staticmethod str sum super
    1              0.000001   syn keyword pythonBuiltin	tuple type vars zip __import__
                              " avoid highlighting attributes as builtins
    1              0.000003   syn match   pythonAttribute	/\.\h\w*/hs=s+1
                            	\ contains=ALLBUT,pythonBuiltin,pythonFunction,pythonAsync
                            	\ transparent
    1              0.000000 endif
                            
                            " From the 'Python Library Reference' class hierarchy at the bottom.
                            " http://docs.python.org/library/exceptions.html
    1              0.000002 if !exists("python_no_exception_highlight")
                              " builtin base exceptions (used mostly as base classes for other exceptions)
    1              0.000001   syn keyword pythonExceptions	BaseException Exception
    1              0.000001   syn keyword pythonExceptions	ArithmeticError BufferError LookupError
                              " builtin exceptions (actually raised)
    1              0.000001   syn keyword pythonExceptions	AssertionError AttributeError EOFError
    1              0.000001   syn keyword pythonExceptions	FloatingPointError GeneratorExit ImportError
    1              0.000001   syn keyword pythonExceptions	IndentationError IndexError KeyError
    1              0.000001   syn keyword pythonExceptions	KeyboardInterrupt MemoryError
    1              0.000001   syn keyword pythonExceptions	ModuleNotFoundError NameError
    1              0.000001   syn keyword pythonExceptions	NotImplementedError OSError OverflowError
    1              0.000001   syn keyword pythonExceptions	RecursionError ReferenceError RuntimeError
    1              0.000001   syn keyword pythonExceptions	StopAsyncIteration StopIteration SyntaxError
    1              0.000001   syn keyword pythonExceptions	SystemError SystemExit TabError TypeError
    1              0.000001   syn keyword pythonExceptions	UnboundLocalError UnicodeDecodeError
    1              0.000001   syn keyword pythonExceptions	UnicodeEncodeError UnicodeError
    1              0.000001   syn keyword pythonExceptions	UnicodeTranslateError ValueError
    1              0.000001   syn keyword pythonExceptions	ZeroDivisionError
                              " builtin exception aliases for OSError
    1              0.000001   syn keyword pythonExceptions	EnvironmentError IOError WindowsError
                              " builtin OS exceptions in Python 3
    1              0.000001   syn keyword pythonExceptions	BlockingIOError BrokenPipeError
    1              0.000001   syn keyword pythonExceptions	ChildProcessError ConnectionAbortedError
    1              0.000001   syn keyword pythonExceptions	ConnectionError ConnectionRefusedError
    1              0.000001   syn keyword pythonExceptions	ConnectionResetError FileExistsError
    1              0.000001   syn keyword pythonExceptions	FileNotFoundError InterruptedError
    1              0.000001   syn keyword pythonExceptions	IsADirectoryError NotADirectoryError
    1              0.000003   syn keyword pythonExceptions	PermissionError ProcessLookupError TimeoutError
                              " builtin warnings
    1              0.000001   syn keyword pythonExceptions	BytesWarning DeprecationWarning FutureWarning
    1              0.000001   syn keyword pythonExceptions	ImportWarning PendingDeprecationWarning
    1              0.000001   syn keyword pythonExceptions	ResourceWarning RuntimeWarning
    1              0.000001   syn keyword pythonExceptions	SyntaxWarning UnicodeWarning
    1              0.000001   syn keyword pythonExceptions	UserWarning Warning
    1              0.000000 endif
                            
    1              0.000001 if exists("python_space_error_highlight")
                              " trailing whitespace
                              syn match   pythonSpaceError	display excludenl "\s\+$"
                              " mixed tabs and spaces
                              syn match   pythonSpaceError	display " \+\t"
                              syn match   pythonSpaceError	display "\t\+ "
    1              0.000000 endif
                            
                            " Do not spell doctests inside strings.
                            " Notice that the end of a string, either ''', or """, will end the contained
                            " doctest too.  Thus, we do *not* need to have it as an end pattern.
    1              0.000001 if !exists("python_no_doctest_highlight")
    1              0.000001   if !exists("python_no_doctest_code_highlight")
    1              0.000006     syn region pythonDoctest
                            	  \ start="^\s*>>>\s" end="^\s*$"
                            	  \ contained contains=ALLBUT,pythonDoctest,pythonFunction,@Spell
    1              0.000005     syn region pythonDoctestValue
                            	  \ start=+^\s*\%(>>>\s\|\.\.\.\s\|"""\|'''\)\@!\S\++ end="$"
                            	  \ contained
                              else
                                syn region pythonDoctest
                            	  \ start="^\s*>>>" end="^\s*$"
                            	  \ contained contains=@NoSpell
    1              0.000000   endif
    1              0.000000 endif
                            
                            " Sync at the beginning of class, function, or method definition.
    1              0.000004 syn sync match pythonSync grouphere NONE "^\%(def\|class\)\s\+\h\w*\s*[(:]"
                            
                            " The default highlight links.  Can be overridden later.
    1              0.000002 hi def link pythonStatement		Statement
    1              0.000001 hi def link pythonConditional		Conditional
    1              0.000001 hi def link pythonRepeat		Repeat
    1              0.000001 hi def link pythonOperator		Operator
    1              0.000001 hi def link pythonException		Exception
    1              0.000001 hi def link pythonInclude		Include
    1              0.000001 hi def link pythonAsync			Statement
    1              0.000001 hi def link pythonDecorator		Define
    1              0.000001 hi def link pythonDecoratorName		Function
    1              0.000001 hi def link pythonFunction		Function
    1              0.000001 hi def link pythonComment		Comment
    1              0.000001 hi def link pythonTodo			Todo
    1              0.000001 hi def link pythonString		String
    1              0.000001 hi def link pythonRawString		String
    1              0.000001 hi def link pythonQuotes		String
    1              0.000001 hi def link pythonTripleQuotes		pythonQuotes
    1              0.000001 hi def link pythonEscape		Special
    1              0.000001 if !exists("python_no_number_highlight")
    1              0.000001   hi def link pythonNumber		Number
    1              0.000000 endif
    1              0.000001 if !exists("python_no_builtin_highlight")
    1              0.000001   hi def link pythonBuiltin		Function
    1              0.000000 endif
    1              0.000001 if !exists("python_no_exception_highlight")
    1              0.000001   hi def link pythonExceptions		Structure
    1              0.000000 endif
    1              0.000001 if exists("python_space_error_highlight")
                              hi def link pythonSpaceError		Error
    1              0.000000 endif
    1              0.000001 if !exists("python_no_doctest_highlight")
    1              0.000001   hi def link pythonDoctest		Special
    1              0.000001   hi def link pythonDoctestValue	Define
    1              0.000000 endif
                            
    1              0.000003 let b:current_syntax = "python"
                            
    1   0.000013   0.000010 let &cpo = s:cpo_save
    1              0.000002 unlet s:cpo_save
                            
                            " vim:set sw=2 sts=2 ts=8 noet:

FUNCTION  1()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/autoload/provider/clipboard.vim:22
Called 1 time
Total time:   0.000030
 Self time:   0.000030

count  total (s)   self (s)
                              " At this point this nvim instance might already have launched
                              " a new provider instance. Don't drop ownership in this case.
    1              0.000009   if self.owner == a:jobid
    1              0.000005     let self.owner = 0
    1              0.000001   endif
                              " Don't print if exit code is >= 128 ( exit is 128+SIGNUM if by signal (e.g. 143 on SIGTERM))
    1              0.000002   if a:data > 0 && a:data < 128
                                echohl WarningMsg
                                echomsg 'clipboard: error invoking '.get(self.argv, 0, '?').': '.join(self.stderr)
                                echohl None
    1              0.000001   endif

FUNCTION  3()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/autoload/provider/clipboard.vim:288
Called 1 time
Total time:   0.002683
 Self time:   0.002683

count  total (s)   self (s)
    1              0.000002   if a:reg == '"'
                                call s:clipboard.set(a:lines,a:regtype,'+')
                                if s:copy['*'] != s:copy['+']
                                  call s:clipboard.set(a:lines,a:regtype,'*')
                                end
                                return 0
    1              0.000000   end
                            
    1              0.000005   if type(s:copy[a:reg]) == v:t_func
                                call s:copy[a:reg](a:lines, a:regtype)
                                return 0
    1              0.000000   end
                            
    1              0.000001   if s:cache_enabled == 0
                                call s:try_cmd(s:copy[a:reg], a:lines)
                                "Cache it anyway we can compare it later to get regtype of the yank
                                let s:selections[a:reg] = copy(s:selection)
                                let s:selections[a:reg].data = [a:lines, a:regtype]
                                return 0
    1              0.000000   end
                            
    1              0.000002   if s:selections[a:reg].owner > 0
                                let prev_job = s:selections[a:reg].owner
    1              0.000000   end
    1              0.000003   let s:selections[a:reg] = copy(s:selection)
    1              0.000001   let selection = s:selections[a:reg]
    1              0.000002   let selection.data = [a:lines, a:regtype]
    1              0.000001   let selection.argv = s:copy[a:reg]
    1              0.000001   let selection.detach = s:cache_enabled
    1              0.000001   let selection.cwd = "/"
    1              0.002614   let jobid = jobstart(selection.argv, selection)
    1              0.000005   if jobid > 0
    1              0.000009     call jobsend(jobid, a:lines)
    1              0.000002     call jobclose(jobid, 'stdin')
                                " xclip does not close stdout when receiving input via stdin
    1              0.000002     if selection.argv[0] ==# 'xclip'
    1              0.000001       call jobclose(jobid, 'stdout')
    1              0.000000     endif
    1              0.000003     let selection.owner = jobid
    1              0.000001     let ret = 1
                              else
                                echohl WarningMsg
                                echomsg 'clipboard: failed to execute: '.(s:copy[a:reg])
                                echohl None
                                let ret = 1
    1              0.000000   endif
                            
                              " The previous provider instance should exit when the new one takes
                              " ownership, but kill it to be sure we don't fill up the job table.
    1              0.000001   if exists('prev_job')
                                call timer_start(1000, {... -> jobwait([prev_job], 0)[0] == -1 && jobstop(prev_job)})
    1              0.000000   endif
                            
    1              0.000002   return ret

FUNCTION  black#Black()
    Defined: ~/.local/share/nvim/lazy/black/autoload/black.vim:224
Called 1 time
Total time:   0.017947
 Self time:   0.017947

count  total (s)   self (s)
    1              0.000007     let kwargs = {}
    1              0.000005     for arg in a:000
                                    let arg_list = split(arg, '=')
                                    let kwargs[arg_list[0]] = arg_list[1]
    1              0.000002     endfor
    1              0.000002 python3 << EOF
                            import vim
                            kwargs = vim.eval("kwargs")
                            EOF
    1              0.017442   :py3 Black(**kwargs)

FUNCTION  <SNR>27_Highlight_Matching_Pair()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/plugin/matchparen.vim:45
Called 109 times
Total time:   0.019681
 Self time:   0.018457

count  total (s)   self (s)
  109              0.000617   if !exists("w:matchparen_ids")
                                let w:matchparen_ids = []
  109              0.000069   endif
                              " Remove any previous match.
  109   0.001758   0.000534   call s:Remove_Matches()
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
  109              0.000337   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
  109              0.000028   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
  109              0.000233   let c_lnum = line('.')
  109              0.000141   let c_col = col('.')
  109              0.000069   let before = 0
                            
  109              0.000196   let text = getline(c_lnum)
  109              0.000414   let c_before = text->strpart(0, c_col - 1)->slice(-1)
  109              0.000252   let c = text->strpart(c_col - 1)->slice(0, 1)
  109              0.001259   let plist = split(&matchpairs, '.\zs[:,]')
  109              0.000214   let i = index(plist, c)
  109              0.000073   if i < 0
                                " not found, in Insert mode try character before the cursor
   80              0.000181     if c_col > 1 && (mode() == 'i' || mode() == 'R')
   48              0.000087       let before = strlen(c_before)
   48              0.000040       let c = c_before
   48              0.000059       let i = index(plist, c)
   80              0.000033     endif
   80              0.000042     if i < 0
                                  " not found, nothing to do
   76              0.000050       return
    4              0.000001     endif
   33              0.000010   endif
                            
                              " Figure out the arguments for searchpairpos().
   33              0.000021   if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
   33              0.000013   else
   33              0.000024     let s_flags = 'nbW'
   33              0.000026     let c2 = c
   33              0.000044     let c = plist[i - 1]
   33              0.000009   endif
   33              0.000038   if c == '['
                                let c = '\['
                                let c2 = '\]'
   33              0.000007   endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
   33              0.000019   if before > 0
    4              0.000008     let save_cursor = getcurpos()
    4              0.000010     call cursor(c_lnum, c_col - before)
    4              0.000010     defer setpos('.', save_cursor)
   33              0.000007   endif
                            
   33              0.000119   if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
   33              0.000076   elseif exists("b:ts_highlight") && &syntax != 'on'
   33              0.000084     let s_skip = "match(v:lua.vim.treesitter.get_captures_at_cursor(), '" .. 'string\|character\|singlequote\|escape\|symbol\|comment' .. "') != -1"
                              else
                                " do not attempt to match when the syntax item where the cursor is
                                " indicates there does not exist a matching parenthesis, e.g. for shells
                                " case statement: "case $var in foobar)"
                                "
                                " add the check behind a filetype check, so it only needs to be
                                " evaluated for certain filetypes
                                if ['sh']->index(&filetype) >= 0 && synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "shSnglCase"}) >= 0
                                  return
                                endif
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial, and
                                " match "symbol" for lispBarSymbol.
                                let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
                                try
                                  execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
                                endtry
   33              0.000009   endif
                            
                              " Limit the search to lines visible in the window.
   33              0.000053   let stoplinebottom = line('w$')
   33              0.000035   let stoplinetop = line('w0')
   33              0.000021   if i % 2 == 0
                                let stopline = stoplinebottom
   33              0.000008   else
   33              0.000031     let stopline = stoplinetop
   33              0.000008   endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
   33              0.000044   if mode() == 'i' || mode() == 'R'
   29              0.000091     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
    4              0.000001   else
    4              0.000017     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
   33              0.000007   endif
   33              0.000013   try
   33              0.006838     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
   33              0.000020   endtry
                            
                              " If a match is found setup match highlighting.
   33              0.000057   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom
   33              0.000035     if !g:matchparen_disable_cursor_hl
   33              0.000226       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
                                else
                                  call add(w:matchparen_ids, matchaddpos('MatchParen', [[m_lnum, m_col]], 10))
   33              0.000009     endif
   33              0.000033     let w:paren_hl_on = 1
   33              0.000009   endif

FUNCTION  provider#clipboard#Call()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/autoload/provider/clipboard.vim:347
Called 1 time
Total time:   0.002720
 Self time:   0.000037

count  total (s)   self (s)
    1              0.000009   if get(s:, 'here', v:false)  " Clipboard provider must not recurse. #7184
                                return 0
    1              0.000001   endif
    1              0.000002   let s:here = v:true
    1              0.000001   try
    1   0.002698   0.000015     return call(s:clipboard[a:method],a:args,s:clipboard)
    1              0.000001   finally
    1              0.000002     let s:here = v:false
    1              0.000001   endtry

FUNCTION  <SNR>27_Remove_Matches()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/plugin/matchparen.vim:203
Called 109 times
Total time:   0.001225
 Self time:   0.001225

count  total (s)   self (s)
  109              0.000253   if exists('w:paren_hl_on') && w:paren_hl_on
   68              0.000102     while !empty(w:matchparen_ids)
   34              0.000143       silent! call remove(w:matchparen_ids, 0)->matchdelete()
   68              0.000040     endwhile
   34              0.000053     let w:paren_hl_on = 0
  109              0.000033   endif

FUNCTION  <SNR>1_LoadFTPlugin()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/ftplugin.vim:15
Called 2 times
Total time:   0.001993
 Self time:   0.001993

count  total (s)   self (s)
    2              0.000012     if exists("b:undo_ftplugin")
                                  exe b:undo_ftplugin
                                  unlet! b:undo_ftplugin b:did_ftplugin
    2              0.000001     endif
                            
    2              0.000007     let s = expand("<amatch>")
    2              0.000002     if s != ""
    2              0.000006       if &cpo =~# "S" && exists("b:did_ftplugin")
                            	" In compatible mode options are reset to the global values, need to
                            	" set the local values also when a plugin was already used.
                            	unlet b:did_ftplugin
    2              0.000001       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "aaa" and then "bbb".
    4              0.000011       for name in split(s, '\.')
                                    " Load Lua ftplugins after Vim ftplugins _per directory_
                                    " TODO(clason): use nvim__get_runtime when supports globs and modeline
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    2              0.001920         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
    4              0.000011       endfor
    2              0.000001     endif

FUNCTION  <SNR>42_SynSet()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/synload.vim:27
Called 2 times
Total time:   0.001437
 Self time:   0.001437

count  total (s)   self (s)
                              " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
    2              0.000006   syn clear
    2              0.000003   if exists("b:current_syntax")
                                unlet b:current_syntax
    2              0.000001   endif
                            
    2              0.000004   0verbose let s = expand("<amatch>")
    2              0.000002   if s == "ON"
                                " :set syntax=ON
                                if &filetype == ""
                                  echohl ErrorMsg
                                  echo "filetype unknown"
                                  echohl None
                                endif
                                let s = &filetype
    2              0.000002   elseif s == "OFF"
                                let s = ""
    2              0.000000   endif
                            
    2              0.000001   if s != ""
                                " Load the syntax file(s).  When there are several, separated by dots,
                                " load each in sequence.  Skip empty entries.
    4              0.000008     for name in split(s, '\.')
    2              0.000002       if !empty(name)
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    2              0.001382         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
    2              0.000001       endif
    4              0.000002     endfor
    2              0.000001   endif

FUNCTION  provider#python3#Call()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/autoload/provider/python3.vim:5
Called 3 times
Total time:   0.022160
 Self time:   0.022160

count  total (s)   self (s)
    3              0.022155   return v:lua.vim.provider.python.call(a:method, a:args)

FUNCTION  <SNR>2_LoadIndent()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/indent.vim:14
Called 2 times
Total time:   0.000545
 Self time:   0.000545

count  total (s)   self (s)
    2              0.000004     if exists("b:undo_indent")
                                  exe b:undo_indent
                                  unlet! b:undo_indent b:did_indent
    2              0.000001     endif
    2              0.000004     let s = expand("<amatch>")
    2              0.000002     if s != ""
    2              0.000002       if exists("b:did_indent")
                            	unlet b:did_indent
    2              0.000001       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
    4              0.000007       for name in split(s, '\.')
                                    " XXX: "[.]" in the pattern makes it a wildcard on Windows
    2              0.000510         exe $'runtime! indent/{name}[.]{{vim,lua}}'
    4              0.000002       endfor
    2              0.000001     endif

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
    3   0.022160             provider#python3#Call()
  109   0.019681   0.018457  <SNR>27_Highlight_Matching_Pair()
    1   0.017947             black#Black()
    1   0.002720   0.000037  provider#clipboard#Call()
    1   0.002683             3()
    2   0.001993             <SNR>1_LoadFTPlugin()
    2   0.001437             <SNR>42_SynSet()
  109   0.001225             <SNR>27_Remove_Matches()
    2   0.000545             <SNR>2_LoadIndent()
    1   0.000030             1()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
    3              0.022160  provider#python3#Call()
  109   0.019681   0.018457  <SNR>27_Highlight_Matching_Pair()
    1              0.017947  black#Black()
    1              0.002683  3()
    2              0.001993  <SNR>1_LoadFTPlugin()
    2              0.001437  <SNR>42_SynSet()
  109              0.001225  <SNR>27_Remove_Matches()
    2              0.000545  <SNR>2_LoadIndent()
    1   0.002720   0.000037  provider#clipboard#Call()
    1              0.000030  1()

